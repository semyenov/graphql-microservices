extend schema
    @link(
      url: "https://specs.apollo.dev/federation/v2.0"
      import: ["@key", "@shareable"]
    )

  # Auth directive imported from shared module

  type User @key(fields: "id") {
    id: ID!
    username: String!
    email: String!
    name: String!
    phoneNumber: String
    role: Role!
    isActive: Boolean!
    createdAt: String!
    updatedAt: String!
  }

  type AuthPayload {
    user: User!
    accessToken: String!
    refreshToken: String!
  }

  enum Role {
    USER
    ADMIN
    MODERATOR
  }

  type Query {
    user(id: ID!): User @auth
    users: [User!]! @auth(requires: ADMIN)
    me: User @auth
    userByUsername(username: String!): User @auth
    userByEmail(email: String!): User @auth(requires: ADMIN)
  }

  type Mutation {
    signUp(input: SignUpInput!): AuthPayload! @public
    signIn(input: SignInInput!): AuthPayload! @public
    refreshToken(refreshToken: String!): AuthPayload! @public
    signOut: Boolean! @auth
    updateUser(id: ID!, input: UpdateUserInput!): User! @auth
    updateProfile(input: UpdateProfileInput!): User! @auth
    changePassword(input: ChangePasswordInput!): Boolean! @auth
    deactivateUser(id: ID!): User! @auth(requires: ADMIN)
  }

  input SignUpInput {
    username: String!
    email: String!
    password: String!
    name: String!
    phoneNumber: String
  }

  input SignInInput {
    username: String!
    password: String!
  }

  input UpdateUserInput {
    username: String
    email: String
    name: String
    phoneNumber: String
    role: Role
  }

  input UpdateProfileInput {
    name: String
    phoneNumber: String
  }

  input ChangePasswordInput {
    currentPassword: String!
    newPassword: String!
  }

  type Subscription {
    userCreated: User! @auth(requires: ADMIN)
    userUpdated(userId: ID): User! @auth
    userDeactivated: User! @auth(requires: ADMIN)
  }