version: '3.9'

x-build-args: &build-args
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain
    
services:
  # PostgreSQL Databases
  postgres-users:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: users_db
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - users_db_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d users_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  postgres-products:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: products_db
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - products_db_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d products_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  postgres-orders:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: orders_db
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - orders_db_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d orders_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis for caching and PubSub
  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Base builder service (builds once, shared by all services)
  builder:
    image: ${REGISTRY}graphql-microservices-builder:${VERSION:-latest}
    build:
      context: .
      dockerfile: Dockerfile.base
      target: service-builder
      cache_from:
        - ${REGISTRY}graphql-microservices-builder:latest
      args:
        <<: *build-args
    networks:
      - none

  # Users Service
  users:
    build:
      context: .
      dockerfile: services/users/Dockerfile
      cache_from:
        - ${REGISTRY}graphql-microservices-users:latest
        - ${REGISTRY}graphql-microservices-builder:latest
      args:
        <<: *build-args
    image: ${REGISTRY}graphql-microservices-users:${VERSION:-latest}
    environment:
      NODE_ENV: production
      PORT: 4001
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres-users:5432/users_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      JWT_ACCESS_PRIVATE_KEY: ${JWT_ACCESS_PRIVATE_KEY}
      JWT_ACCESS_PUBLIC_KEY: ${JWT_ACCESS_PUBLIC_KEY}
      JWT_REFRESH_PRIVATE_KEY: ${JWT_REFRESH_PRIVATE_KEY}
      JWT_REFRESH_PUBLIC_KEY: ${JWT_REFRESH_PUBLIC_KEY}
      JWT_ACCESS_EXPIRES_IN: ${JWT_ACCESS_EXPIRES_IN:-15m}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      INTROSPECTION_ENABLED: ${INTROSPECTION_ENABLED:-false}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      QUERY_MAX_COMPLEXITY: ${QUERY_MAX_COMPLEXITY:-1000}
      QUERY_MAX_DEPTH: ${QUERY_MAX_DEPTH:-10}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
      OTEL_SERVICE_NAME: users-service
    depends_on:
      postgres-users:
        condition: service_healthy
      redis:
        condition: service_healthy
      builder:
        condition: service_completed_successfully
    networks:
      - backend
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

  # Products Service
  products:
    build:
      context: .
      dockerfile: services/products/Dockerfile
      cache_from:
        - ${REGISTRY}graphql-microservices-products:latest
        - ${REGISTRY}graphql-microservices-builder:latest
      args:
        <<: *build-args
    image: ${REGISTRY}graphql-microservices-products:${VERSION:-latest}
    environment:
      NODE_ENV: production
      PORT: 4002
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres-products:5432/products_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      JWT_ACCESS_PUBLIC_KEY: ${JWT_ACCESS_PUBLIC_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      INTROSPECTION_ENABLED: ${INTROSPECTION_ENABLED:-false}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      QUERY_MAX_COMPLEXITY: ${QUERY_MAX_COMPLEXITY:-1000}
      QUERY_MAX_DEPTH: ${QUERY_MAX_DEPTH:-10}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
      OTEL_SERVICE_NAME: products-service
    depends_on:
      postgres-products:
        condition: service_healthy
      redis:
        condition: service_healthy
      builder:
        condition: service_completed_successfully
    networks:
      - backend
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

  # Orders Service
  orders:
    build:
      context: .
      dockerfile: services/orders/Dockerfile
      cache_from:
        - ${REGISTRY}graphql-microservices-orders:latest
        - ${REGISTRY}graphql-microservices-builder:latest
      args:
        <<: *build-args
    image: ${REGISTRY}graphql-microservices-orders:${VERSION:-latest}
    environment:
      NODE_ENV: production
      PORT: 4003
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres-orders:5432/orders_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/2
      JWT_ACCESS_PUBLIC_KEY: ${JWT_ACCESS_PUBLIC_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      INTROSPECTION_ENABLED: ${INTROSPECTION_ENABLED:-false}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      QUERY_MAX_COMPLEXITY: ${QUERY_MAX_COMPLEXITY:-1000}
      QUERY_MAX_DEPTH: ${QUERY_MAX_DEPTH:-10}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
      OTEL_SERVICE_NAME: orders-service
    depends_on:
      postgres-orders:
        condition: service_healthy
      redis:
        condition: service_healthy
      builder:
        condition: service_completed_successfully
    networks:
      - backend
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

  # Gateway Service
  gateway:
    build:
      context: .
      dockerfile: services/gateway/Dockerfile
      cache_from:
        - ${REGISTRY}graphql-microservices-gateway:latest
        - ${REGISTRY}graphql-microservices-builder:latest
      args:
        <<: *build-args
    image: ${REGISTRY}graphql-microservices-gateway:${VERSION:-latest}
    environment:
      NODE_ENV: production
      PORT: 4000
      SUBGRAPH_URLS: |
        [
          {"name": "users", "url": "http://users:4001/graphql"},
          {"name": "products", "url": "http://products:4002/graphql"},
          {"name": "orders", "url": "http://orders:4003/graphql"}
        ]
      POLLING_INTERVAL: ${POLLING_INTERVAL:-30000}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      INTROSPECTION_ENABLED: ${INTROSPECTION_ENABLED:-false}
      RETRY_ATTEMPTS: ${RETRY_ATTEMPTS:-3}
      RETRY_DELAY: ${RETRY_DELAY:-100}
      QUERY_MAX_COMPLEXITY: ${QUERY_MAX_COMPLEXITY:-2000}
      QUERY_MAX_DEPTH: ${QUERY_MAX_DEPTH:-15}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
      OTEL_SERVICE_NAME: gateway-service
    depends_on:
      users:
        condition: service_healthy
      products:
        condition: service_healthy
      orders:
        condition: service_healthy
    ports:
      - "${GATEWAY_PORT:-4000}:4000"
    networks:
      - backend
      - frontend
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      gateway:
        condition: service_healthy
    networks:
      - frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  users_db_data:
  products_db_data:
  orders_db_data:
  redis_data: